global:
  S3: 
    destination:
      accessKey: vector
      secretAccessKey: vectorPassword
      server: 10.8.0.9
      serverPort: 9000
      serverProto: http
      bucket: 3dtiles
      region: "us-east-1"
      style: path
      sslEnabled: false
      maxAttempts: 3
      sigVersion: 4
      storageClass: 'STANDARD'

  serving:
    authorization:
      enabled: true
      domain: '3d'
      url: 'http://opa-dev-opa-service.infra-services/v1/data/http/authz/decision'

  filebeat:
    enabled: false
    image: docker.elastic.co/beats/filebeat:7.12.1
    mountPath: /usr/src/app/logs
    pycsw:
      mountPath: /var/log/pycsw
      logFile: pycsw.log
    nginxS3Gateway: 
      mountPath: /var/log/nginx
    elastic:
      host: 10.8.0.8
      port: 9200
      protocol: http
      username: 
      password:
      index: 3d-np
      sslEnabled: false
    kibana:
      host: 10.8.0.8:5601

S3: 
  destination:
    accessKey: ''
    secretAccessKey: ''
    server: 10.8.0.9
    serverPort: 9000
    serverProto: ''
    bucket: ''
    region: ''
    style: ''
    sslEnabled: false
    maxAttempts: 
    sigVersion: 
    storageClass: ''

serving:
  authorization:
    enabled: true
    domain: '3d'
    url: 'http://opa-dev-opa-service.infra-services/v1/data/http/authz/decision'

filebeat:
    enabled: false
    image: docker.elastic.co/beats/filebeat:7.12.1
    mountPath: /usr/src/app/logs
    pycsw:
      mountPath: /var/log/pycsw
      logFile: pycsw.log
    nginxS3Gateway: 
      mountPath: /var/log/nginx
    elastic:
      host: 10.8.0.8
      port: 9200
      protocol: http
      username: 
      password:
      index: 3d-np
      sslEnabled: false
    kibana:
      host: 10.8.0.8:5601

enabled: true
cloudProvider:
    dockerRegistryUrl: 
    imagePullSecretName: ''
    flavor: openshift

initialDelaySeconds: 10

nodePort: 30030

allowDirectoryList: 'false'

replicaCount: 1

annotations:
  collectord.io/index: ''
  collectord.io/logs-output: ''

image:
  repository: 'nginx-s3-gateway'
  tag: ''

env:
  protocol: TCP
  port: 8080
  targetPort: 8080
  tracing:
    enabled: false
    url: 'http://localhost:55681/v1/trace'
  metrics:
    enabled: false
    url: http://localhost:55681/v1/metrics

resources:
  enabled: true
  value:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

ingress:
  enabled: false
  path: /
  host: 'localhost'
  type: nginx-kubernetes # supported values: 'nginx-org' | 'nginx-kubernetes'

route:
  enabled: true
  https: true
  host: 
  path: /
  
  annotations:
    haproxy.router.openshift.io/rewrite-target: /
  useCert: false
  
debug: true
corsEnabled: true
nginxWorkerProcesses: 4
customServerConf: "expires 4w;\n"
customLocationConf: "proxy_no_cache 1;\n"

cache:
  maxSize: 10g
  inactive: 60m
  validOk: 1h
  validNotfound: 1m
  validForbidden: 30s

redis:
  enabled: true
  host: ''
  port: 
  sslEnabled: true
  skipCache: 0 # 0 for false. If it contains any other value, the service will skip cache in redis
  cacheExpirationTime: 1000
  connectionTimeout: 100
  sendTimeout: 100
  readTimeout: 100
  maxIdleTimeout: 200
  poolSize: 100
  authentication:
    requirePassword: true
    password: ''
    username: ''
  prefix:
    enabled: true
    value: ''